// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or any plugin's vendor/assets/javascripts directory can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file.
//
// Read Sprockets README (https://github.com/rails/sprockets#sprockets-directives) for details
// about supported directives.
//
//= require jquery
//= require jquery_ujs
//= require_tree .

window.Surveyor = {
  ticketPlacement: false,
  ticketsSurveyed: [],
  failedSurveys: [],
  survey: function(e){
    if(e.data) {
      // Single ticket
      Surveyor.surveySingle(e.data);
    } else {
      // All tickets in "waiting" state
      Surveyor.surveyAll();
    }
  },
  surveySingle: function(ticketId){
    var card = Surveyor.card;
    Surveyor.surveyTicket(ticketId).then(function(){
        Materialize.toast('Ticket survey sent.', 3000);
        Surveyor.log(ticketId);
    });
  },
  surveyAll: function(){
    Surveyor.surveyPageOfTickets(1).then(function(){
      Materialize.toast('Survey successfully sent for ' + Surveyor.ticketsSurveyed.length + ' tickets.', 4500);
      Surveyor.log(false);
    });
  },
  surveyPageOfTickets: function(curPage){
    var card = Surveyor.card;
    var prom = card.services('helpdesk').request('tickets', {status: 'open', page: curPage, per_page: 100}).then(function(t){
      var promises = [];
      curPage = t['meta']['current_page'];
      pageCount = t['meta']['page_count'];
      var ticketList = t['tickets'];
      for(var i=0; i < ticketList.length; i++){
        var tick = ticketList[i];
        if(tick['status'] == 'waiting') {
          promises.push(Surveyor.surveyTicket(tick['id']));
        }
      }
      if(curPage < pageCount) {
        promises.push(Surveyor.surveyPageOfTickets(curPage + 1));
      }
      return Promise.all(promises);
    });
    return prom;
  },
  surveyTicket: function(ticketId){
    var card = Surveyor.card;
    if(!Surveyor.surveyText){
      Materialize.toast('Unable to load survey text; please try again later.', 3000);
      return false;
    }

    return card.services('helpdesk').request('comment:create', ticketId, {
      public: true,
      body: Surveyor.surveyText
    }).then(function(d){
      Surveyor.ticketsSurveyed.push(ticketId);
    }, function(e){
      Surveyor.failedSurveys.push(ticketId);
      Materialize.toast('Unable to send survey for ticket #' + ticketId + '.', 3000);
    });
  },
  log: function(specificTicket){
    var goodSurveys = specificTicket ? specificTicket : Surveyor.ticketsSurveyed;
    $.post('/survey_history', {
      site: Surveyor.site,
      stid: goodSurveys,
      ftid: Surveyor.failedSurveys,
      me: Surveyor.user,
      ts: !!specificTicket
    }, function(){
      Surveyor.getSurveyHistory(specificTicket);
    });
    Surveyor.ticketsSurveyed = [];
    Surveyor.failedSurveys = [];
    // On success of history post, add wave to history title, add entries to list, and wave the new entries too
  },
  getSurveyHistory: function(ticketId){
    var args = {site: Surveyor.site};
    if(ticketId){
      args.ticket_id = ticketId;
    }
    $.getJSON('/survey_history', args, Surveyor.loadHistory);
  },
  loadHistory: function(data){
    var $hist = $('.survey-history tbody');
    $hist.empty();
    var senders = {};
    for(var i = 0; i < data.length; i++){
      var user = data[i]['surveying_user_id'];
      senders[user] = true;
      var created_at = data[i]['created_at'];
      $('<tr><td>'+moment(created_at).format('lll')+
        '</td><td class="ticket-id">'+data[i]['ticket_id']+
        '</td><td><i class="material-icons tooltipped" data-position="left" data-tooltip="'+(data[i]['successful'] ? 'Successful Survey">done' : 'Unable to send Survey">report_problem')+
        '</i></td><td class="user" data-user-id="'+user+'">'+user+
        '</td><td>'+data[i]['action_id']+
        '</td></tr>').appendTo($hist);
    }
    $hist.find('.tooltipped').tooltip({delay: 40});
    Surveyor.nameSenders($hist, senders);
  },
  getSurveyText: function(){
    $.getJSON('/survey_text.json', {site: Surveyor.site}, Surveyor.loadSurveyText);
  },
  loadSurveyText: function(data){
    var txt = data['text'];
    if(!txt){
      Materialize.toast('Unable to load survey text; please try again later.', 3000);
      return;
    }
    Surveyor.surveyText = txt;
    $('#survey_text').val(txt);
  },
  nameSenders: function($hist, senders){
    var card = Surveyor.card;
    for(var userId in senders) {
      var z = card.services('people').request('person', parseInt(userId)).then(function(user){
        $hist.find('td.user[data-user-id='+user.id+']').text(user.first_name + ' ' + user.last_name);
      });
    }
  }
};
$('document').ready(function() {
  var card = new SW.Card();
  Surveyor.card = card;
  card.onActivate(function(envData) {
    Surveyor.env = envData;
    $('#auid').val(envData['app_host']['auid']);
    Surveyor.site = envData['app_host']['auid'];
    Surveyor.user = envData['user']['id'];

    Surveyor.getSurveyText();

    if(!Surveyor.ticketPlacement) {
      $('#site').val(Surveyor.site);
      // Only request all surveys if we're not on a specific ticket
      Surveyor.getSurveyHistory(false);
      $('#send_surveys').on('click', window.Surveyor.survey);
      $('#survey_text_form').on('ajax:success', function(e, data, status, xhr) {
        Surveyor.loadSurveyText(data);
      });
    }
  });

  card.services('helpdesk').on('showTicket', function(ticketId) {
    Surveyor.getSurveyHistory(ticketId);
    $('#send_survey').on('click', ticketId, Surveyor.survey);
  });
});
