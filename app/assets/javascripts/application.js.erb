// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or any plugin's vendor/assets/javascripts directory can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file.
//
// Read Sprockets README (https://github.com/rails/sprockets#sprockets-directives) for details
// about supported directives.
//
//= require jquery
//= require jquery_ujs
//= require_tree .

window.Surveyor = {
  ticketPlacement: false,
  ticketsSurveyed: [],
  failedSurveys: [],
  alreadySurveyed: [],
  survey: function(e){
    if(e.data) {
      // Single ticket
      Surveyor.surveySingle(e.data);
    } else {
      // All tickets in "waiting" state
      Surveyor.surveyAll();
    }
  },
  surveySingle: function(ticketId){
    var card = Surveyor.card;
    card.services('helpdesk').request('ticket', ticketId).then(function(tick){
      Surveyor.surveyTicket(ticketId, tick['assignee']['id'], true).then(function(){
          Materialize.toast('Ticket survey sent.', 3000);
          Surveyor.log(ticketId);
      });
    });
  },
  surveyAll: function(){
    Surveyor.surveyPageOfTickets(1).then(function(){
      Materialize.toast('Survey successfully sent for ' + Surveyor.ticketsSurveyed.length + ' tickets.', 4500);
      Surveyor.log(false);
    });
  },
  surveyPageOfTickets: function(curPage){
    var card = Surveyor.card;
    var weekAgo = moment().subtract(7, 'days').format();
    var prom = card.services('helpdesk').request('tickets', {status: 'closed', closed_at: {after: weekAgo}, page: curPage, per_page: 100}).then(function(t){
      var promises = [];
      curPage = t['meta']['current_page'];
      pageCount = t['meta']['page_count'];
      var ticketList = t['tickets'];
      for(var i=0; i < ticketList.length; i++){
        var tick = ticketList[i];
        promises.push(Surveyor.surveyTicket(tick['id'], tick['assignee']['id'], false));
      }
      if(curPage < pageCount) {
        promises.push(Surveyor.surveyPageOfTickets(curPage + 1));
      }
      return Promise.all(promises);
    });
    return prom;
  },
  surveyTicket: function(ticketId, assigneeId, single){
    var card = Surveyor.card;
    if(!Surveyor.surveyText){
      Materialize.toast('Unable to load survey text; please try again later.', 3000);
      return false;
    }

    if(Surveyor.alreadySurveyed.indexOf(ticketId) !== -1){
      // already sent survey
      if(single){
        Materialize.toast('This ticket was already surveyed.', 3000);
      }
      return true;
    }

    var link = 'https://safe-reef-61473.herokuapp.com/survey?site='+Surveyor.site+'&ticket_id='+ticketId;
    if(assigneeId){
      link += '&aid='+assigneeId;
    }

    return card.services('helpdesk').request('comment:create', ticketId, {
      public: true,
      body: Surveyor.surveyText + '\r\nTicket survey: ' + link
    }).then(function(d){
      Surveyor.ticketsSurveyed.push(ticketId);
      return true;
    }, function(e){
      Surveyor.failedSurveys.push(ticketId);
      Materialize.toast('Unable to send survey for ticket #' + ticketId + '.', 3000);
      return false;
    }).then(function(success){
      if(success) {
        return card.services('helpdesk').request('ticket:update', ticketId, {
          status: 'closed'
        }).then(null, function(error){
          Materialize.toast('Unable to re-close ticket #' + ticketId + '.', 3000);
          return false;
        })
      }
    });
  },
  log: function(specificTicket){
    var goodSurveys = specificTicket ? specificTicket : Surveyor.ticketsSurveyed;
    $.post('/survey_history', {
      site: Surveyor.site,
      stid: goodSurveys,
      ftid: Surveyor.failedSurveys,
      me: Surveyor.user,
      ts: !!specificTicket
    }, function(){
      Surveyor.getSurveyHistory(specificTicket);
    });
    Surveyor.ticketsSurveyed = [];
    Surveyor.failedSurveys = [];
    // On success of history post, add wave to history title, add entries to list, and wave the new entries too
  },
  getSurveyHistory: function(ticketId){
    var args = {site: Surveyor.site};
    if(ticketId){
      args.ticket_id = ticketId;
    }

    // Make sure ticketId gets passed
    var boundLoadHistory = Surveyor.loadHistory.bind(undefined, ticketId?ticketId:undefined);
    $.getJSON('/survey_history', args, boundLoadHistory);
  },
  loadHistory: function(ticketId, data){
    var $hist = $('.survey-history tbody');
    $hist.empty();
    Surveyor.alreadySurveyed = [];
    var senders = {};
    if(data.length === 0){
      $('<tr><td colspan="5">No Surveys Sent</td></tr>').appendTo($hist);
    }
    for(var i = 0; i < data.length; i++){
      var user = data[i]['surveying_user_id'];
      senders[user] = true;
      var ticket = data[i]['ticket_id'];
      Surveyor.alreadySurveyed.push(ticket);
      var created_at = data[i]['created_at'];
      $('<tr><td>'+moment(created_at).format('lll')+
        '</td><td class="ticket-id"><a href="#" onclick="Surveyor.card.services(\'environment\').trigger(\'navigate\', \'/tickets/list/single_ticket/'+ticket+'\'); return false;">'+ticket+
        '</a></td><td><i class="material-icons tooltipped" data-position="left" data-tooltip="'+(data[i]['successful'] ? 'Successful Survey">done' : 'Unable to send Survey">report_problem')+
        '</i></td><td class="user" data-user-id="'+user+'">'+user+
        '</td><td>'+data[i]['action_id']+
        '</td></tr>').appendTo($hist);
    }
    $hist.find('.tooltipped').tooltip({delay: 40});
    Surveyor.nameSenders($hist, senders);

    // Make sure ticketId gets passed
    var boundDraw = Surveyor.drawResults.bind(undefined, ticketId?ticketId:undefined);
    google.charts.setOnLoadCallback(boundDraw);

  },
  getSurveyText: function(){
    $.getJSON('/survey_text.json', {site: Surveyor.site}, Surveyor.loadSurveyText);
  },
  loadSurveyText: function(data){
    var txt = data['text'];
    if(!txt){
      Materialize.toast('Unable to load survey text; please try again later.', 3000);
      return;
    }
    Surveyor.surveyText = txt;
    $('#survey_text').val(txt);
  },
  getSurveyQuestion: function(){
    $.getJSON('/survey_question.json', {site: Surveyor.site}, Surveyor.loadSurveyQuestion);
  },
  loadSurveyQuestion: function(data){
    var question = data['question'];
    if(!question){
      Materialize.toast('Unable to load survey question; please try again later.', 3000);
      return;
    }
    Surveyor.surveyQuestion = question;
    $('#survey_question').val(question);

    var answers = data['answers'];
    if(!answers || answers.length < 4){
      Materialize.toast('Unable to load survey answers; please try again later.', 3000);
      return;
    }
    for(var i = 1; i < 5; i++) {
        var ans = answers[i-1];
        Surveyor['surveyAnswer'+i] = ans;
        $('#survey_answer'+i).val(ans);
    }
  },
  getSurveyResponses: function(ticketId){
    $.getJSON('/survey_responses.json', {site: Surveyor.site, ticket_id: ticketId}, Surveyor.loadSurveyResponses);
  },
  loadSurveyResponses: function(data){
    var $hist = $('.survey-responses tbody');
    $hist.empty();
    if(data.length === 0){
      $hist.append('<tr><td colspan="4">No Survey Responses</td></tr>');
      return;
    }
    var chart = Surveyor.setupChart();
    var results = {};
    var adminResults = {};
    var choices = [];
    for(var i = 0; i < data.length; i++){
      var created_at = data[i]['created_at'];
      var choice = data[i]['choice'];
      var name = Surveyor['surveyAnswer' + choice];
      if(name == undefined) {
        name = 'N/A';
      }
      var admin = data[i]['assignee_id'];
      var comment = data[i]['comment'];
      var expander = '';
      if(comment.length > 200){
        expander = '<a href="#" onclick="$(\'.response'+i+' .comment div\').addClass(\'expand\'); $(\'.response'+i+' .comment > a\').hide(); return false;">more</a>';
      }
      $('<tr class="response'+i+'"><td>'+moment(created_at).format('lll')+
        '</td><td class="ticket-id"><a href="#" onclick="Surveyor.card.services(\'environment\').trigger(\'navigate\', \'/tickets/list/single_ticket/'+data[i]['ticket_id']+'\'); return false;">'+data[i]['ticket_id']+
        '</a></td><td>'+name+
        '</td><td class="comment"><div>'+comment+
        '</div>'+expander+'</td></tr>').appendTo($hist);
      adminResults[admin] = (adminResults[admin] || {});
      if(name !== 'N/A') {
        results[name] = (results[name] || 0) + 1;
        adminResults[admin][choice] = (adminResults[admin][choice] || 0) + 1;
      }
      if(choices.indexOf(choice) == -1 && choice != undefined && choice != null){
        choices.push(choice);
      }
    }
    Surveyor.drawChart(chart, results, $('.results-pie')[0]);
    var adminChart = Surveyor.setupAdminChart(choices);
    Surveyor.drawAdminChart(adminChart, adminResults, $('.admin-pie')[0], choices);
  },
  setupChart: function(){
    var chart = new google.visualization.DataTable();
    chart.addColumn('string', 'Response');
    chart.addColumn('number', 'Results');
    return chart;
  },
  setupAdminChart: function(choices){
    var chart = new google.visualization.DataTable();
    chart.addColumn('string', 'Admin');
    for(var c in choices){
      chart.addColumn('number', Surveyor['surveyAnswer' + choices[c]]);
    }
    return chart;
  },
  drawChart: function(chart, results, domElement){
    for(var r in results){
      chart.addRow([r, results[r]]);
    }
    var pie = new google.visualization.PieChart(domElement);
    pie.draw(chart, {title: 'Survey Summary', width: 450, height: 300});
  },
  drawAdminChart: function(chart, results, domElement, choices){
    for(var r in results){
      var adminSummary = [];

      for(var c = 0; c < choices.length; c++){
        var cnt = results[r][choices[c]];
        adminSummary[c] = (cnt || 0);
      }
      adminSummary.unshift(Surveyor.admins[r] || ('Admin ' + r));
      chart.addRow(adminSummary);
    }
    var options = {
      width: 450,
      height: 300,
      legend: { position: 'top', maxLines: 3 },
      bar: { groupWidth: '75%' },
      isStacked: true,
      title: 'Admin Summary'
    };

    var pie = new google.visualization.BarChart(domElement);

    pie.draw(chart, options);
  },
  drawResults: function(ticketId){
    Surveyor.getSurveyResponses(ticketId);
  },
  nameSenders: function($hist, senders){
    var card = Surveyor.card;
    var admins = {};
    var z = card.services('environment').request('users').then(function(users){
      for(var userIdx in users.users){
        var user = users.users[userIdx];
        var uname = user.first_name + ' ' + user.last_name;
        $hist.find('td.user[data-user-id='+user.id+']').text(uname);
        admins[user.id] = uname;
        // we have a bit of a race condition here, so if the graph was already created -- go back and update the names
        $('.admin-pie svg>g>g>g>text:contains(Admin ' + user.id + ')').text(uname);
      }
    });
    Surveyor.admins = admins;
  },
  handleFormSubmits: function(){
    $('#survey_text_form, #survey_question_form').on('ajax:success', function(){
      Materialize.toast('Saved.', 1000);
    }).on('ajax:error', function(){
      Materialize.toast('Error saving, please try again in a few minutes.', 3000);
    });
  }
};
$('document').ready(function() {
  var card = new SW.Card();
  Surveyor.card = card;
  card.onActivate(function(envData) {
    Surveyor.env = envData;
    $('#auid').val(envData['app_host']['auid']);
    Surveyor.site = envData['app_host']['auid'];
    Surveyor.user = envData['user']['id'];

    Surveyor.getSurveyText();
    Surveyor.getSurveyQuestion();
    Surveyor.handleFormSubmits();

    if(!Surveyor.ticketPlacement) {
      $('#site, input[name=site]').val(Surveyor.site);
      card.services('environment').request('resize', {height: 2000})
      // Only request all surveys if we're not on a specific ticket
      Surveyor.getSurveyHistory(false);
      $('#send_surveys').on('click', window.Surveyor.survey);
      $('#survey_text_form').on('ajax:success', function(e, data, status, xhr) {
        Surveyor.loadSurveyText(data);
      });
      $('#survey_question_form').on('ajax:success', function(e, data, status, xhr) {
        Surveyor.loadSurveyQuestion(data);
      });
    }
  });

  card.services('helpdesk').on('showTicket', function(ticketId) {
    Surveyor.getSurveyHistory(ticketId);
    $('#send_survey').on('click', ticketId, Surveyor.survey);
  });
});
